#!/usr/bin/env bash
set -euo pipefail

# ==========================================================
# 🧰 Full Dotfiles Setup Script (macOS)
# ==========================================================
DOTFILES_DIR="$HOME/dotfiles"
SETUP_DIR="$DOTFILES_DIR/setup"
BREWFILE="$SETUP_DIR/Brewfile"
SYMLINK_SCRIPT="$SETUP_DIR/symlinks.sh"
POSTINSTALL_SCRIPT="$SETUP_DIR/postinstall.sh"
BACKUP_DIR="$DOTFILES_DIR/backups/$(date +'%Y-%m-%d_%H-%M-%S')"

divider() { echo "=========================================================="; }

# ----------------------------------------------------------
# Step 0: Backup Existing Configs
# ----------------------------------------------------------
echo "🗂️  Backing up existing config files before setup..."
mkdir -p "$BACKUP_DIR"

backup_item() {
	local src="$1"
	if [ -e "$src" ]; then
		local rel_path="${src/#$HOME\//}"
		local dest="$BACKUP_DIR/$rel_path"
		mkdir -p "$(dirname "$dest")"
		mv "$src" "$dest"
		echo "📦 Backed up: $src → $dest"
	fi
}

divider
echo "🔄 Backing up:"
backup_item "$HOME/.zshrc"
backup_item "$HOME/.zprofile"
backup_item "$HOME/.p10k.zsh"
backup_item "$HOME/.config/nvim"
backup_item "$HOME/.config/tmux"
backup_item "$HOME/.config/alacritty"
backup_item "$HOME/.config/yabai"
backup_item "$HOME/.config/skhd"
backup_item "$HOME/.config/lf"

divider
echo "✅ Backup completed! All old configs are safe under:"
echo "   $BACKUP_DIR"

divider

# ----------------------------------------------------------
# Step 1: Homebrew Installation
# ----------------------------------------------------------
echo "🍺 Checking Homebrew..."
if ! command -v brew >/dev/null 2>&1; then
	echo "🚀 Installing Homebrew..."
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	echo "⚙️  Adding Homebrew to PATH..."
	if [ -d /opt/homebrew/bin ]; then
		eval "$(/opt/homebrew/bin/brew shellenv)"
		echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>"$HOME/.zprofile"
	elif [ -d /usr/local/bin ]; then
		eval "$(/usr/local/bin/brew shellenv)"
		echo 'eval "$(/usr/local/bin/brew shellenv)"' >>"$HOME/.zprofile"
	fi
else
	echo "✅ Homebrew already installed."
fi

divider

# ----------------------------------------------------------
# Step 2: Brewfile installation
# ----------------------------------------------------------
if [ -f "$BREWFILE" ]; then
	echo "📦 Installing Brew packages..."
	brew update
	brew bundle --file="$BREWFILE" || echo "⚠️ Some Brew installs failed."
else
	echo "⚠️ Brewfile not found at $BREWFILE."
fi

divider

# ----------------------------------------------------------
# Step 3: NVM + Node.js Setup
# ----------------------------------------------------------
if [ ! -d "$HOME/.nvm" ]; then
	echo "🟢 Installing NVM (Node Version Manager)..."
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
else
	echo "✅ NVM already installed."
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

if command -v nvm >/dev/null 2>&1; then
	echo "⬇️ Installing latest LTS Node version..."
	nvm install --lts
	nvm alias default 'lts/*'
	nvm use default
else
	echo "⚠️ NVM installation not detected; skipping Node setup."
fi

divider

# ----------------------------------------------------------
# Step 4: Run symlink setup
# ----------------------------------------------------------
if [ -f "$SYMLINK_SCRIPT" ]; then
	echo "🔗 Running symlink setup..."
	chmod +x "$SYMLINK_SCRIPT"

	echo ""
	echo "Select symlink mode:"
	echo "1) 🧪 Dry Run"
	echo "2) ⚙️ Actual Run"
	echo "3) 🚫 Skip"
	echo ""
	read -r -p "Enter your choice [1/2/3]: " SYM_CHOICE
	case "$SYM_CHOICE" in
	1)
		echo "🧪 Dry run only"
		"$SYMLINK_SCRIPT"
		;;
	2)
		echo "⚙️ Running for real"
		"$SYMLINK_SCRIPT"
		;;
	3) echo "⏭️ Skipping symlinks" ;;
	*) echo "❌ Invalid input. Skipping." ;;
	esac
else
	echo "⚠️ Symlink script missing at $SYMLINK_SCRIPT"
fi

divider

# ----------------------------------------------------------
# Step 5: Post-install Setup
# ----------------------------------------------------------
if [ -f "$POSTINSTALL_SCRIPT" ]; then
	echo "🚀 Running Post-install script..."
	chmod +x "$POSTINSTALL_SCRIPT"
	"$POSTINSTALL_SCRIPT"
else
	echo "⚠️ No postinstall.sh found, skipping."
fi

divider
echo "🎉 Setup complete! All previous configurations backed up safely."
echo "💡 Next Steps:"
echo "  - Restart terminal"
echo "  - Check backups under: $BACKUP_DIR"
