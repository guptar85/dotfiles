# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set drawbox
# interpreter for shell commands
set shell sh
map <enter> shell
set icons
set scrolloff 10      # space on top and bottom of screen
set preview on        # preview file on the right pane
set ratios '1:2:3'

# cmds/functions
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type "$(stat -f $f)" -b) in
        text/*|application/json|inode/x-empty) nvim $fx;;
        audio/*) mpv --audio-display=no $f ;;
        image/*) open $f > /dev/null 2>&1 ;;
        video/*) mpv $f -quiet ;;
       	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) open $f > /dev/null 2>&1 ;;
       	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template)  open $f > /dev/null 2>&1 ;;
    	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) open $f > /dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) mupdf-gl $f > /dev/null 2>&1 & ;;	
        application/pgp-encrypted) nvim $fx ;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && sudo rm -rf -- $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(find $HOME/ -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m)" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	terminal-notifier -message "ðŸšš File(s) moved. File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(find $HOME/ -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m)" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	terminal-notifier -message "ðŸ“‹ File(s) copied. File(s) copies to $dest."
}}

map C copyto
map M moveto
map D delete

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Bindings
map g top
map . set hidden!
map <c-f> $lf -remote "send $id select \"$(fzf)\""

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &open $f
